package bandersnatch

/*
This file just contains decimal constants that are useful to recognize when debugging
*/

const (
// Note: Square root sign choice is consistent.
// a/d + d/a == 6
// a^2/d^2 + d^2/a^2 == 34
// In fact: sqrt(a/d) = sqrt(2) - 1
/*
	c_FieldSize            = 52435875175126190479447740508185965837690552500527637822603658699938581184513
	c_minusOne             = 52435875175126190479447740508185965837690552500527637822603658699938581184512
	c_A2DivD2              = 22565310644434464519342756791512671907971345094866777587369846929326388492190 // a^2 / d^2
	c_minusA2DivD2         = 29870564530691725960104983716673293929719207405660860235233811770612192692323 // - a^2 / d^2
	c_A3halfDivD3half      = 29924693612830282643192990051342527749946520585867904372215307804401274016639 // sqrt(a/d)^3
	c_minusA3HalfDivD3Half = 22511181562295907836254750456843438087744031914659733450388350895537307167874 // -sqrt(a/d)^3
	c_ADivD                = 29978822694968839326280996386011761570173833766074948509196803838190355340955 // a/d
	c_minusADivD           = 22457052480157351153166744122174204267516718734452689313406854861748225843558 // -a/d
	c_sqrtADivD            = 37446463827641770816307242315180085052603635617490163568005256780843403514036 // sqrt(a/d)
	c_negSqrtADivD         = 14989411347484419663140498193005880785086916883037474254598401919095177670477 // -sqrt(a/d)
	c_sqrtDDivA            = 37446463827641770816307242315180085052603635617490163568005256780843403514038 // sqrt(d/a) = sqrt(a/d) + 2
	c_negSqrtDDivA         = 14989411347484419663140498193005880785086916883037474254598401919095177670475 // -sqrt(d/a)
	c_dDivA                = 22457052480157351153166744122174204267516718734452689313406854861748225843564 // d/a
	c_negDDivA             = 29978822694968839326280996386011761570173833766074948509196803838190355340949 // -d/a
	c_D3HalfDivA3Half      = 29924693612830282643192990051342527749946520585867904372215307804401274016653 // sqrt(d/a)^3
	c_minusD3HalfDivA3Half = 22511181562295907836254750456843438087744031914659733450388350895537307167860 // -sqrt(d/a)^3
	c_D2DivA2              = 29870564530691725960104983716673293929719207405660860235233811770612192692357 // d^2/a^2 = -a^2/d^2 + 34
	c_negD2DivA2           = 22565310644434464519342756791512671907971345094866777587369846929326388492156 // -d^2/a^2
	c_SqrtATimesD          = 22511181562295907836254750456843438087744031914659733450388350895537307167862 // sqrt(a*d)
	c_negSqrtATimesD       = 29924693612830282643192990051342527749946520585867904372215307804401274016651 // -sqrt(a*d) = 12 + sqrt(a/d)^3
	c_aTimesD              = 37067560252671874034691197972495448311012443356040854609134784544319834243970 // a*d
	c_negATimesD           = 15368314922454316444756542535690517526678109144486783213468874155618746940543 // -a*d
	c_paramA               = -5                                                                            // a
	c_paramD               = 45022363124591815672509500913686876175488063829319466900776701791074614335719 // d
	c_GLSeigenvalue        = 8913659658109529928382530854484400854125314752504019737736543920008458395397  // lambda
	c_CurveOrder           = 52435875175126190479447740508185965837236623573762281007145613226918750691204 // Number of Rational Points on curve
	c_AbsTraceFrob         = 453928926765356815458045473019830493310                                       // FieldSize + 1 - CurverOrder
	c_GroupOrder           = 13108968793781547619861935127046491459309155893440570251786403306729687672801 // p253 == CurverOrder/4
	c_1Over5               = 31461525105075714287668644304911579502614331500316582693562195219963148710708 // 1/5 = -1/a
	c_1Overa               = 20974350070050476191779096203274386335076221000211055129041463479975432473805 // -1/5 = 1/a
	c_endoa_2              = 16179988757916560831507847845231514874200184790675259448634235621035630577620 // endoa2
	c_endoa_1              = 16179988757916560824577558193084210236647645729299773892093730683504906651604 // endoa1
	c_endoa2Overa          = 49199877423542878313146170939139662862850515542392585932876811575731455068989 // endoa2/a
	c_endoa2Minusa1        = 6930289652147304637552539061375485556540504937530723926016                    // endoa2-endoa1
	c_endoa2Minusa1SHR     = 24621334845233294563913301052250963453149186                                  // endoa2-endoa1 / (2**48) == 2*15132376222941642752^3
	c_endo_c               = 49199877423542878313146170939139662862850515542392585932876811575731455068989
*/
)
